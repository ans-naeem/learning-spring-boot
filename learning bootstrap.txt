https://youtu.be/9SGDpanrc8U?si=N2XOi3FsYPKqKyy9

1:00:03

download notepad++ 

Note:
We dont need to tell explicitly where the task is placed it automatically have a bird's eye view of the project and know where it is.


spring boot 2.1.17 is not compatible with java 21 we need to downgrade it to 17 to make it compatible
other wise errors occurs while executing the code.



to find the proccess id listening to the specific port:
------------------------------------------------------
netstat -ano | findstr :8080

to kill some task:
-------------------
taskkill /PID 21192 /F


Annotations:
--------------
@RestController to tell this is a controller
@RequestMappings to tell this controller maps to this request same like in flask we do 
		@app.route('/')
		def index():     
		  ...

In Spring boot we do 

@RestController 
public class controller
{
	@RequestMappings('/hello')
	{
		return ...;
	}
}


@PathVariable to tell the spring boot that use the integer variable passed in the URL.
@AutoWired use Some specific Service or (interface) inside the controller very important topic called dependency Injection

@Service is use to define some service which controller called by instansiating the service class with autowired anotation.

@requestbody is use to bind the http request object with the (POJO) java object.

@Entity is use to tell the JPA that its an entity and shouldbe mapped.

@Id is use to tell its a primary key and can be used to uniquely identify the data.



------------------------------------------
Shiva labs:spring boot tips part 1
https://youtu.be/2dPon1G5S-M?si=y2lq8_X48moxrbIh

In pom when we define some dependency we usually use the parent project of dependency eg.

<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.2</version>
    </parent>

its our parent project and inside there are lot of dependencies under <dependency managment> tag present with version id specified in it. we usually use that and if we want to use some latest 
dependency so we exclude it like this:
 			<exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>

and add seperate depency in properties so that required version can be import.(<properties>) also some time transitive dependency create the problem so it is necessary to have a crisp
idea about that.

Shiva labs:spring boot tips part 2
--------------------------------------
Spring boot configuration options:
1->Default values:
EX: application.properties

2->profile specific overrides.
EX: application-{profile}.properties

3->Environment variables  (higest property)
EX: SERVER_PORT=9090


we can make a class implemment from CommandLineRunner and get the value using this syntax:
@Component
class Appinitializer implements CommandLineRunner{

    @Value("${app.version}")
    private String appversion;

    @Override
    public void run(String... args) throws Exception {
        System.out.println("The app version is "+appversion);
    }
}

if we have large number of properties than its very tidious way to get the value one by one there is another method.

just create a class and anotate it with @ConfigurationProperties and tell which prefix it should look into EX: app.version(app is prefix).To get the value of 
app.datasource.url we need to have a nested static class because spring boot cant be able to instansiate without having an object of outer class
result in not binding the variables with values.

Also you need to tell at entry point of spring boot application that 
@EnableConfigurationProperties({ApplicationProperties.class}) //you can pass as many classes as you want in it



@ConfigurationProperties(prefix = "app")
public class ApplicationProperties {

    //it should be same present in application.properties file
    String version;
    String author;
    DataSoruce datasource;
	//implement all getter and setters.
    //inner class

    public static class DataSource{
        String url; 
        String driverClassName;
        String username;

       //immplement all setter and getter.

        @Override
        public String toString() {
            return "DataSoruce{" +
                    "url='" + url + '\'' +
                    ", driverClassName='" + driverClassName + '\'' +
                    ", username='" + username + '\'' +
                    '}';
        }
    }


we can validate our application proerties using java validation api.
<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

add @Validated in you applicationproperty.java class

You can use records in java if you want unmutable objects it could bind automatically but i would prefer the use of class.
as illustrated above.



    
	

