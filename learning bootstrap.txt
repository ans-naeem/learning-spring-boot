https://youtu.be/9SGDpanrc8U?si=N2XOi3FsYPKqKyy9

1:00:03

download notepad++ 

Note:
We dont need to tell explicitly where the task is placed it automatically have a bird's eye view of the project and know where it is.


spring boot 2.1.17 is not compatible with java 21 we need to downgrade it to 17 to make it compatible
other wise errors occurs while executing the code.



to find the proccess id listening to the specific port:
------------------------------------------------------
netstat -ano | findstr :8080

to kill some task:
-------------------
taskkill /PID 21192 /F


Annotations:
--------------
@RestController to tell this is a controller
@RequestMappings to tell this controller maps to this request same like in flask we do 
		@app.route('/')
		def index():     
		  ...

In Spring boot we do 

@RestController 
public class controller
{
	@RequestMappings('/hello')
	{
		return ...;
	}
}


@PathVariable to tell the spring boot that use the integer variable passed in the URL.
@AutoWired use Some specific Service or (interface) inside the controller very important topic called dependency Injection

@Service is use to define some service which controller called by instansiating the service class with autowired anotation.

@requestbody is use to bind the http request object with the (POJO) java object.
	Purpose: Used to bind the entire body of an HTTP request to an object.

@requestParam is use to extract parameter values from the data passed in URL or query  in function arguments contrary to requestbody which binds with the post request.
	Purpose: Used to extract query parameters, form data, or values from the URL.
	Example:GET /api/users?id=123&name=John
	    public String getUser(@RequestParam("id") int id, @RequestParam("name") String name) {
 
@Entity is use to tell the JPA that its an entity and shouldbe mapped.

@Id is use to tell its a primary key and can be used to uniquely identify the data.

------------------------------------------------------------------------------------------
Caching in Bootstrap using caffine.

1-->Add dependency in pom
	<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.ben-manes.caffeine</groupId>
            <artifactId>caffeine</artifactId>
        </dependency>

2-->define the properties in application.properties that when should expire what is the name and so on.
	spring.cache.cache-names=hello
	spring.cache.caffeine.spec=maximumSize=500,expireAfterAccess=600s
					OR
Define a config class like that 
@Configuration
public class CaffeineCacheConfig {

 @Bean
 public CacheManager cacheManager() {
  CaffeineCacheManager cacheManager = new CaffeineCacheManager("customer");
  cacheManager.setCaffeine(caffeineCacheBuilder());
  return cacheManager;
 }

 Caffeine < Object, Object > caffeineCacheBuilder() {
  return Caffeine.newBuilder()
   .initialCapacity(100)
   .maximumSize(500)
   .expireAfterAccess(10, TimeUnit.MINUTES)
   .weakKeys()
   .recordStats();
 }
}

3-->Tell the spring boot at starting point that @EnableCaching

4-->Define @Cacheable("cachename") in that route on which you want spring boot to cache.


------------------------------------------
Shiva labs:spring boot tips part 1
https://youtu.be/2dPon1G5S-M?si=y2lq8_X48moxrbIh

In pom when we define some dependency we usually use the parent project of dependency eg.

<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.2</version>
    </parent>

its our parent project and inside there are lot of dependencies under <dependency managment> tag present with version id specified in it. we usually use that and if we want to use some latest 
dependency so we exclude it like this:
 			<exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>

and add seperate depency in properties so that required version can be import.(<properties>) also some time transitive dependency create the problem so it is necessary to have a crisp
idea about that.

Shiva labs:spring boot tips part 2
--------------------------------------
Spring boot configuration options:
1->Default values:
EX: application.properties

2->profile specific overrides.
EX: application-{profile}.properties

3->Environment variables  (higest property)
EX: SERVER_PORT=9090


we can make a class implemment from CommandLineRunner and get the value using this syntax:
@Component
class Appinitializer implements CommandLineRunner{

    @Value("${app.version}")
    private String appversion;

    @Override
    public void run(String... args) throws Exception {
        System.out.println("The app version is "+appversion);
    }
}

if we have large number of properties than its very tidious way to get the value one by one there is another method.

just create a class and anotate it with @ConfigurationProperties and tell which prefix it should look into EX: app.version(app is prefix).To get the value of 
app.datasource.url we need to have a nested static class(Static because spring boot cant be able to instansiate without having an object 
of outer class result in not binding the variables with values).

Also you need to tell at entry point of spring boot application that 
@EnableConfigurationProperties({ApplicationProperties.class}) //you can pass as many classes as you want in it



@ConfigurationProperties(prefix = "app")
public class ApplicationProperties {

    //it should be same present in application.properties file
    String version;
    String author;
    DataSoruce datasource;
	//implement all getter and setters.
    //inner class

    public static class DataSource{
        String url; 
        String driverClassName;
        String username;

       //immplement all setter and getter.

        @Override
        public String toString() {
            return "DataSoruce{" +
                    "url='" + url + '\'' +
                    ", driverClassName='" + driverClassName + '\'' +
                    ", username='" + username + '\'' +
                    '}';
        }
    }


we can validate our application proerties using java validation api.
<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

add @Validated in you applicationproperty.java class

You can use records in java if you want unmutable objects it could bind automatically but i would prefer the use of class.
as illustrated above.


Shiva labs:spring boot tips part 3
--------------------------------------
Logging in spring boot.

If we want to make a file of logs then we can tell spring boot to make a file and dump all the logs in it by simply adding this in our application.properties.
logging.file.name=myapp.logs

We can also tell spring boot to log different pakages on a different level in a project:
Log LEVEL
eg:     logging.level.org.springframework=INFO
	logging.level.com.ans.spring.boot.Repositories=DEBUG; and so on

we can also make a group of pacakages and tell that group should log in that leve like
logging.group.ansservice=com.ans.spring.boot.Repositories,org.springframework
logging.level.ansservice=DEBUG  # now tell the compiler that its a group and change its log level

Mapped diagnostic context.(MDC)
let say we have an api and we want whenever this api called there should be trace of which user called it in logs.
For this we can use MDC.put(userid="id") and add in 
logging.pattern.console =...%clr(userId :%X {userid:-Guest}  (the :-Guest is the default value)
 
The default library which is defined in spring boot starter web pacakage is logback but if we want to use log4j2 instead we first tell the spring boot by excluding 
from starter web and add mmanually the log4j2 dependency


	

